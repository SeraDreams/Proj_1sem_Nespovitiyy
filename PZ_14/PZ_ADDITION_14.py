"""
https://regex101.com/r/aGn8QC/2
•	Найдите все натуральные числа (возможно, окружённые буквами);
•	Найдите все «слова», написанные капсом (то есть строго заглавными), возможно внутри настоящих слов (аааБББввв);
•	Найдите слова, в которых есть русская буква, а за ней цифра;
•	Найдите все слова, начинающиеся с русской или латинской большой буквы (\b — граница слова);
•	Найдите слова, которые начинаются на гласную (\b — граница слова);
•	Найдите все натуральные числа, не находящиеся на границе слова;
•	Найдите строчки, в которых есть символ * (. — это точно не конец строки!);
•	Найдите строчки, в которых есть открывающая и когда-нибудь потом закрывающая скобки;
•	Выделите одним махом весь кусок оглавления (в конце примера, вместе с тегами);
•	Выделите одним махом только текстовую часть оглавления, без тегов;
•	Найдите пустые строчки;
•	Найти все теги, не включая их содержимое.
"""


import re

patterns = [
    r"\d+",
    r"[А-ЯЁ]+",
    r"\b[а-яё]\d+\b",
    r"\b[А-ЯЁA-Z]\w+\b",
    r"\b[аеёиоуыэюяАЕЁИОУЫЭЮЯ]\w+\b",
    r"(?<!\b)\d+(?!\b)",
    r".*\*.*",
    r".*\(.+\).*",
    r"<ul>(.*)</ul>",
    r"<ul>(.*?)</ul>",
    r"^$",
    r"<.*?>",
]

pattern_names = [
    "Найти все натуральные числа",
    "Найти все слова, написанные капсом",
    "Найти слова, в которых есть русская буква, а за ней цифра",
    "Найти все слова, начинающиеся с русской или латинской большой буквы",
    "Найти слова, которые начинаются на гласную",
    "Найти все натуральные числа, не находящиеся на границе слова",
    "Найти строчки, в которых есть символ *",
    "Найти строчки, в которых есть открывающая и когда-нибудь потом закрывающая скобки",
    "Выделите одним махом весь кусок оглавления",
    "Выделите одним махом только текстовую часть оглавления",
    "Найти пустые строчки",
    "Найти все теги, не включая их содержимое",
]


def find_pattern(text, pattern_number):
    """
    Функция для поиска текста по регулярному выражению,
    принимает номер шаблона и текст.

    Args:
      text (str): Текст для поиска.
      pattern_number (int): Номер шаблона.

    Returns:
      list: Список найденных совпадений.
    """

    if pattern_number > len(patterns):
        raise ValueError("Номер шаблона должен быть от 1 до {}".format(len(patterns)))

    pattern = patterns[pattern_number - 1]
    return re.findall(pattern, text)


def main():
    """
    Функция для отображения меню и выполнения поиска.
    """

    while True:
        for i, name in enumerate(pattern_names, start=1):
            print("{}. {}".format(i, name))
        print("Выберите номер шаблона (1-{}) или 0 для выхода: ".format(len(patterns)))

        try:
            choice = int(input())
        except ValueError:
            print("Неверный формат. Введите число.")
            continue

        if choice == 0:
            break

        if choice < 1 or choice > len(patterns):
            print("Номер шаблона должен быть от 1 до {}.".format(len(patterns)))
            continue

        # Пример использования
        text = """
        Привет, мир!
        
        123abc456
        АБВГДЕёЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ
        апав
        агав
        
        Привет123
        
        Привет, Мир!
        
        *важное сообщение*
        
        (скобки)
        
        <ul>
          <li>Пункт 1</li>
          <li>Пункт 2</li>
        </ul>
        
        """
        print("**{}:**".format(pattern_names[choice - 1]))
        print(find_pattern(text, choice))

        print('Хотите продолжить нажмите 1, если хотите закончить то 0: ')
        if int(input()) == 1:
            continue
        else:
            break


if __name__ == "__main__":
    main()
